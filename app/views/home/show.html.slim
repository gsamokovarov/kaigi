section.center
  h1 <img class="inline" src="#{image_path("rubo-logo-horizontal.png")}" width="400px">'s Baddest Cop

section.center
  h2 ðŸ‘‹

section.center
  img.inline src=image_path("me.png")
  h2 Genadi Samokovarov

section.center
  h2 ã‚²ãƒŠãƒ‡ã‚£
  span: p &nbsp;

section.center data-background="#000"
  h2.white ã‚²ãƒŠãƒ‡ã‚£
  span: p.white &nbsp;

section.center data-background="#000"
  h2.white <span class="red">ã‚²</span>ãƒŠãƒ‡ã‚£
  span: p.white Ge

section.center data-background="#000"
  h2.white <span class="red">ã‚²ãƒŠ</span>ãƒ‡ã‚£
  span: p.white Gena

section.center data-background="#000"
  h2.white <span class="red">ã‚²ãƒŠ</span><del>ãƒ‡ã‚£</del>
  span: p.white Gena

section.center
  a(href="https://twitter.com/gsamokovarov") twitter.com/gsamokovarov

section.center
  a(href="https://github.com/gsamokovarov") github.com/gsamokovarov

section.center
  a href="https://dext.com"
    <svg width="600" height="300" viewBox="0 0 92 46" fill="none"><g><g><path fill-rule="evenodd" clip-rule="evenodd" d="M69.3797 25.0805L74.4661 7.33036C74.5855 6.91424 74.17 6.52051 73.6115 6.52051H64.4595L62.2731 20.4749L60.0868 6.52051H50.9347C50.3762 6.52051 49.9608 6.91424 50.0801 7.33036L55.1665 25.0805L49.8441 44.7314C49.732 45.1457 50.1464 45.5339 50.7007 45.5339H59.9184L62.2731 30.8327L64.6276 45.5339H73.8456C74.3996 45.5339 74.8143 45.1457 74.7022 44.7314L69.3797 25.0805Z" fill="var(--color-dext, #FF5A01)"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M13.0696 8.09422C13.0696 7.04477 12.4875 6.52012 11.3234 6.52012H9.92119V39.1768H11.2706C12.4611 39.1768 13.0696 38.6521 13.0696 37.6025V8.09422ZM12.2494 0.163086C19.1283 0.163086 23.1496 2.98865 23.1496 8.53813V37.2998C23.1496 40.004 22.1708 42.0424 20.2392 43.4349C18.2815 44.8274 15.6094 45.5336 12.2494 45.5336H0.874736C0.391605 45.5336 0 45.2349 0 44.8663V0.830415C0 0.46202 0.391605 0.163086 0.874736 0.163086H12.2494Z" fill="var(--color-dext, #FF5A01)"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M35.9281 13.2205V20.2038H38.9178V13.2205C38.9178 12.171 38.4415 11.6464 37.5155 11.6464C36.4837 11.6464 35.9546 12.171 35.9281 13.2205ZM48.2833 14.4314V24.4204C48.2833 24.789 47.8917 25.0876 47.4085 25.0876H35.9281V38.6687C35.9281 39.7182 36.4837 40.243 37.5684 40.243C38.4945 40.243 38.9706 39.779 38.9706 38.8704V27.4085H47.4085C47.8917 27.4085 48.2833 27.7072 48.2833 28.0758V38.7899C48.2833 41.0301 47.3574 42.7657 45.4791 44.037C43.6005 45.3085 40.9547 45.934 37.5684 45.934C30.2664 45.934 26.2979 43.0078 26.2979 37.7V15.501C26.2979 9.16421 30.0284 6.15723 37.5155 6.15723C44.7118 6.15723 48.3099 8.92216 48.2833 14.4314Z" fill="var(--color-dext, #FF5A01)"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M90.9071 6.52012H86.7161V0.830415C86.7161 0.461693 86.3245 0.163086 85.8412 0.163086H78.6161L76.8152 6.44821C76.8018 6.49495 76.7949 6.54268 76.7949 6.59057V12.877V36.524V38.3893C76.7949 40.6294 77.7211 42.3652 79.5996 43.6364C81.3866 44.8462 83.8714 45.4681 87.0245 45.5261C87.1179 45.5283 87.2127 45.5294 87.3076 45.5307C87.3313 45.5309 87.3779 45.5315 87.3779 45.5315C87.4313 45.5322 87.4833 45.5333 87.5371 45.5333H90.9071C91.3904 45.5333 91.782 45.2347 91.782 44.866V39.1766H88.5163C87.3256 39.1766 86.7171 38.6518 86.7171 37.6025L86.7161 12.8553H91.782V7.18745C91.782 6.81906 91.3904 6.52012 90.9071 6.52012Z" fill="var(--color-dext, #FF5A01)"></path></g></g></svg>

section.center
  img.inline width="100%" src="https://dext.com/static/83abc78aaac52679434307babe9d6108/829b1/perpare-business.webp"

section.center
  img.inline width="60%" src=image_path("dext_products.png")

section.center data-background="#ff5a01"
  h1.white Remote first company

section.center data-background="#ff5a01"
  img.inline width="300px" src=image_path("scumbag_hat.png")

section.center
  img width="100%" src=image_path("dext_documentation.png")

section.center
  span
    img.inline width="20%" src=image_path("me.png")
    img.inline width="20%" src="https://www.ruby-lang.org/images/header-ruby-logo@2x.png"

section.center
  h1 10 years of Ruby anniversary!

section.center data-background="#007d9c"
  a href="https://go.dev"
    img.inline src="https://go.dev/images/go-logo-white.svg"

section.center data-background="#007d9c"
  p.white go fmt ./...

section.center data-background="#007d9c"
  img.inline src=image_path("mario_crown.png") width="200px"

section.center
  a.fragment href="https://dext.com"
    <svg width="600" height="300" viewBox="0 0 92 46" fill="none"><g><g><path fill-rule="evenodd" clip-rule="evenodd" d="M69.3797 25.0805L74.4661 7.33036C74.5855 6.91424 74.17 6.52051 73.6115 6.52051H64.4595L62.2731 20.4749L60.0868 6.52051H50.9347C50.3762 6.52051 49.9608 6.91424 50.0801 7.33036L55.1665 25.0805L49.8441 44.7314C49.732 45.1457 50.1464 45.5339 50.7007 45.5339H59.9184L62.2731 30.8327L64.6276 45.5339H73.8456C74.3996 45.5339 74.8143 45.1457 74.7022 44.7314L69.3797 25.0805Z" fill="var(--color-dext, #FF5A01)"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M13.0696 8.09422C13.0696 7.04477 12.4875 6.52012 11.3234 6.52012H9.92119V39.1768H11.2706C12.4611 39.1768 13.0696 38.6521 13.0696 37.6025V8.09422ZM12.2494 0.163086C19.1283 0.163086 23.1496 2.98865 23.1496 8.53813V37.2998C23.1496 40.004 22.1708 42.0424 20.2392 43.4349C18.2815 44.8274 15.6094 45.5336 12.2494 45.5336H0.874736C0.391605 45.5336 0 45.2349 0 44.8663V0.830415C0 0.46202 0.391605 0.163086 0.874736 0.163086H12.2494Z" fill="var(--color-dext, #FF5A01)"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M35.9281 13.2205V20.2038H38.9178V13.2205C38.9178 12.171 38.4415 11.6464 37.5155 11.6464C36.4837 11.6464 35.9546 12.171 35.9281 13.2205ZM48.2833 14.4314V24.4204C48.2833 24.789 47.8917 25.0876 47.4085 25.0876H35.9281V38.6687C35.9281 39.7182 36.4837 40.243 37.5684 40.243C38.4945 40.243 38.9706 39.779 38.9706 38.8704V27.4085H47.4085C47.8917 27.4085 48.2833 27.7072 48.2833 28.0758V38.7899C48.2833 41.0301 47.3574 42.7657 45.4791 44.037C43.6005 45.3085 40.9547 45.934 37.5684 45.934C30.2664 45.934 26.2979 43.0078 26.2979 37.7V15.501C26.2979 9.16421 30.0284 6.15723 37.5155 6.15723C44.7118 6.15723 48.3099 8.92216 48.2833 14.4314Z" fill="var(--color-dext, #FF5A01)"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M90.9071 6.52012H86.7161V0.830415C86.7161 0.461693 86.3245 0.163086 85.8412 0.163086H78.6161L76.8152 6.44821C76.8018 6.49495 76.7949 6.54268 76.7949 6.59057V12.877V36.524V38.3893C76.7949 40.6294 77.7211 42.3652 79.5996 43.6364C81.3866 44.8462 83.8714 45.4681 87.0245 45.5261C87.1179 45.5283 87.2127 45.5294 87.3076 45.5307C87.3313 45.5309 87.3779 45.5315 87.3779 45.5315C87.4313 45.5322 87.4833 45.5333 87.5371 45.5333H90.9071C91.3904 45.5333 91.782 45.2347 91.782 44.866V39.1766H88.5163C87.3256 39.1766 86.7171 38.6518 86.7171 37.6025L86.7161 12.8553H91.782V7.18745C91.782 6.81906 91.3904 6.52012 90.9071 6.52012Z" fill="var(--color-dext, #FF5A01)"></path></g></g></svg>

section.center
  ruby:
    module Seedgate
      extend self

      def account_seeds
        return [] unless Settings.seedgate

        initialize_seeds Settings.seedgate.seed_definition_file,
                         Settings.seedgate.watched_seeders_files

        @account_seeds ||=
          Seeds.
            definitions_with_metadata.
            select { _1.matches? account_type: }
      end

      private

      def account_type = 'Account'

      def initialize_seeds(definition_file, watched_files)
        previous_modification_times = @modification_times
        @modification_times = watched_files.map { File.mtime _1 }

        if previous_modification_times && @modification_times != previous_modification_times
          load definition_file
          @account_seeds = nil
        else
          require definition_file
        end
      end
    end

section.center
  img.inline src=image_path("rubo-logo-horizontal.png") width="400px"

section.center
  img.inline src=image_path("mario_crown.png") width="200px"

section.center data-background=image_path("trakia_vakarel.jpg")
  h1.white.shadow BY THE WAY

section.center
  ruby:
    module Seedgate
      extend self

      def account_seeds
        return [] unless Settings.seedgate.enabled

        seeds_reinitialized =
          initialize_seeds Settings.seedgate.seed_definition_file,
                           Settings.seedgate.watched_seeders_files

        @account_seeds = nil if seeds_reinitialized

        @account_seeds ||=
          Seeds.
            definitions_with_metadata.
            select { _1.matches? account_type: }
      end

      private

      def account_type = 'Account'

      def initialize_seeds(definition_file, watched_files)
        previous_modification_times = @modification_times
        @modification_times = watched_files.map { File.mtime _1 }

        if previous_modification_times && @modification_times != previous_modification_times
          load definition_file
          true
        else
          require definition_file
          false
        end
      end
    end

section.center data-background="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Flag_of_Bulgaria.svg/2000px-Flag_of_Bulgaria.svg.png"
  h2.white.shadow Bulgarian Style
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Bulgaria"

section.center data-background=image_path("bulgarian_style.jpg")
  h2.white.shadow Bulgarian Style

section.center data-background="#000"
  h2.white.fragment RuboCop's Baddest Cop

section.center
  pre(contenteditable=true): code.yml
    '
      Style/MethodCallWithArgsParentheses:
        Description: 'Use parentheses for method calls with arguments.'
        StyleGuide: '#method-invocation-parens'
        Enabled: false
        VersionAdded: '0.47'
        VersionChanged: '1.7'
        IgnoreMacros: true
        AllowedMethods: []
        AllowedPatterns: []
        IncludedMacros: []
        AllowParenthesesInMultilineCall: false
        AllowParenthesesInChaining: false
        AllowParenthesesInCamelCaseMethod: false
        AllowParenthesesInStringInterpolation: false
        EnforcedStyle: require_parentheses
        SupportedStyles:
          - require_parentheses
          - omit_parentheses

section.center
  pre(contenteditable=true): code.yml
    '
      Style/MethodCallWithArgsParentheses:
        EnforcedStyle: omit_parentheses
        AllowParenthesesInMultilineCall: false
        AllowParenthesesInChaining: false
        AllowParenthesesInCamelCaseMethod: false
        AllowParenthesesInStringInterpolation: false

section.center
  h2 Agenda
  ol.left-aligned-text
    li whitequark/parser
    li Method dispatch parsing 101
    li RuboCop development basics

section.center data-background="#000"
  h2.white whitequark/parser

section.center
  p Parser is a production-ready Ruby parser written in Ruby

section.center
  p Used by RuboCop to parse Ruby code into AST since 2013

section.center
  ruby:
    require 'parser/current'

    source = 'puts "Hello, Ruby Kaigi!"'
    ast = Parser::CurrentRuby.parse(source)

    puts ast

section.center data-background="#000"
  h2.white Method dispatch parsing <span class="gray">101</span>

section.center
  ruby:
    Kernel.puts "Oh, hi Ruby Kaigi!"

section.center
  ruby:
    puts "Oh, hi Ruby Kaigi!"

section.center
  ruby:
    self.puts "Oh, hi Ruby Kaigi!"

section.center
  ruby:
    3.times { puts "Hip, hip, hooray!" }

section.center
  ruby:
    attendees.sample(50).each do |attendee|
      TrainTicket.book train, attendee:
    end

section.center
  h2.white <span class="red">Ruby</span> <span class="fragment"> syntax quirks</span>

section.center
  p When can we <strong>can</strong> omit parentheses in Ruby?

section.center
  pre(contenteditable=true): code.ruby
    '
      test()
          ^^ Omit parentheses for method calls with arguments.

section.center
  pre(contenteditable=true): code.ruby
    '
      test # ðŸ‘‘

section.center
  pre(contenteditable=true): code.ruby
    '
      Array(list)
           ^^^^^^ Omit parentheses for method calls with arguments.

section.center
  pre(contenteditable=true): code.ruby
    '
      Array list # ðŸ‘‘

section.center
  pre(contenteditable=true): code.ruby
    '
      test(foo: bar)
          ^^^^^^^^^^ Omit parentheses for method calls with arguments.

section.center
  pre(contenteditable=true): code.ruby
    '
      test foo: bar # ðŸ‘‘

section.center
  pre(contenteditable=true): code.ruby
    '
      test(
          ^ Omit parentheses for method calls with arguments.
        foo: bar
        quux: baz
      )

section.center
  pre(contenteditable=true): code.ruby
    '
      test foo: bar,
           quux: baz # ðŸ‘‘

section.center
  pre(contenteditable=true): code.ruby
    '
      def method(arg)
        super(arg)
             ^^^^^ Omit parentheses for method calls with arguments.
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      def method(arg)
        super arg # ðŸ‘‘
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      yield(:arg)
           ^^^^^^ Omit parentheses for method calls with arguments.

section.center
  pre(contenteditable=true): code.ruby
    '
      yield :arg # ðŸ‘‘

section.center
  pre(contenteditable=true): code.ruby
    '
      foo().bar(3).wait(4)
                       ^^^ Omit parentheses for method calls with arguments.
section.center
  pre(contenteditable=true): code.ruby
    '
      foo().bar(3).wait 4 # ðŸ‘‘

section.center
  pre(contenteditable=true): code.ruby
    '
      foo(:arg) do
         ^^^^^^ Omit parentheses for method calls with arguments.
        bar
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      foo :arg do # ðŸ‘‘
        bar
      end

section.center data-background="#000"
  p.white When can we <strong>cannot</strong> omit parentheses in Ruby?

section.center
  pre(contenteditable=true): code.ruby
    '
      test 1, 2, arg: calc(3)

section.center
  pre(contenteditable=true): code.ruby
    '
      test 1, 2, arg: [calc(3)]

section.center
  pre(contenteditable=true): code.ruby
    '
      weather regions: {sofia: timezone(:eest)}

section.center
  pre(contenteditable=true): code.ruby
    '
      [
        Stat.new("Users Today") do
          User.today.count
        end,
        Stat.new("Servers Today") do
          Server.today.count
        end
      ]

section.center
  pre(contenteditable=true): code.ruby
    '
      render json: FieldSearch.with(search_params).map(&method(:serialize))

section.center
  pre(contenteditable=true): code.ruby
    '
      foo(/a*b*/)

section.center
  pre(contenteditable=true): code.ruby
    '
      foo(/a*b*/)

section.center
  pre(contenteditable=true): code.ruby
    '
      def regular(arg = default(42))
        nil
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      def foo(bar: baz(42))
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      ConstantLikeMethod()

section.center
  pre(contenteditable=true): code.ruby
    '
      proc_call_syntax.(:proc, :arguments)

section.center
  pre(contenteditable=true): code.ruby
    '
      delay.calculation(:low_priotity).and_wait(4).it

section.center
  pre(contenteditable=true): code.ruby
    '
      foo(1) { 2 }

section.center
  pre(contenteditable=true): code.ruby
    '
      foo({hash: literal_anywhere_as_argument})

section.center
  pre(contenteditable=true): code.ruby
    '
      hash.should eq({})

section.center
  pre(contenteditable=true): code.ruby
    '
      call(value_omission_as_last_argument:)

section.center
  pre(contenteditable=true): code.ruby
    '
      call(...)

section.center
  pre(contenteditable=true): code.ruby
    '
      if success = destroy_remote(server)
        delete server
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      def oneliner = any_method_call(with_arguments)

section.center
  pre(contenteditable=true): code.ruby
    '
      yield path, File.basename(path)

section.center
  pre(contenteditable=true): code.ruby
    '
      class Point < Struct.new(:x, :y); end

section.center
  pre(contenteditable=true): code.ruby
    '
      1..limit(n)
      1...limit(n)

section.center data-background="#000"
  p.white When it is <strong>ambiguous</strong> to omit parentheses in Ruby?

section.center
  pre(contenteditable=true): code.ruby
    '
      foo().bar(3).wait(4) + 4

section.center
  pre(contenteditable=true): code.ruby
    '
      foo(a) && bar(b)
      foo(a) || bar(b)

section.center
  pre(contenteditable=true): code.ruby
    '
      method(*args)
      method(**kwargs)

section.center
  pre(contenteditable=true): code.ruby
    '
      foo.include?(bar) ? bar : quux

section.center
  pre(contenteditable=true): code.ruby
    '
      foo(-1)
      foo(+1)
      foo(-"")
      foo(+"")

section.center
  pre(contenteditable=true): code.ruby
    '
      data&.[](value)
      value.===(other)

section.center
  pre(contenteditable=true): code.ruby
    '
      foo bar:
      42

section.center
  a href="https://bugs.ruby-lang.org/issues/18396" An unexpected "hash value omission" syntax error when without parentheses call expr follows

section.center data-background="#000"
  h2.white.fragment VALUE <span class="fragment">OMISSION</span> <span class="fragment">SYNTAX</span>
  p.white.fragment without parentheses

section.center
  pre(contenteditable=true): code.ruby
    '
      create :integration_shop, account:, user: non_omitted_user # ðŸ‘‘
      pass

section.center
  pre(contenteditable=true): code.ruby
    '
      create :integration_shop, account:, user: # ðŸ¤®
      pass

section.center
  pre(contenteditable=true): code.ruby
    '
      if condition?
        raise Error.new 'A long error message...', foo: # ðŸ‘‘
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      if condition?
        raise Error.new 'A long error message...', foo: if condition # ðŸ¤®
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      if condition?
        raise Error.new('A long error message...', foo:) if condition # ðŸ‘‘
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      var =
        unless object.action value:, other:
          condition || other_condition
        end

section.center
  pre(contenteditable=true): code.ruby
    '
      var =
        unless object.action value:, other: # ðŸ˜–
          condition || other_condition
        end

section.center
  pre(contenteditable=true): code.ruby
    '
      var =
        unless object.action value:, other: condition || other_condition # ðŸ¤¦
        end
      # => nil

section.center
  p Value omission syntax without parantheses is tricky!

section.center data-background="#000"
  h2.white whitequark/parser

section.center data-background="#000"
  h2.white ruby-parse

section.center
  p Invaluable tool for RuboCop development!

