section.center data-background="#000"
  h1.white Implementing Web Console
  p.red <span class="white">by</span> Genadi Samokovarov

section.center
  h2 üëã

section.center
  img.inline src=image_path("me")

section.center
  h2 Genadi Samokovarov

section.center
  h2 „Ç≤„Éä„Éá„Ç£„Éª„Çµ„É¢„Ç≥„É¥„Ç°„É≠„Éï

section.center data-background="#000"
  h2.white „Ç≤„Éä„Éá„Ç£
  p.white &nbsp;

section.center data-background="#000"
  h2.white <span class="red">„Ç≤</span>„Éä„Éá„Ç£
  span.fragment
    p.white „Ç≤„ÉÉ„Éà (get)

section.center data-background="#000"
  h2.white „Ç≤<span class="red">„Éä</span>„Éá„Ç£
  span.fragment
    p.white „Éä„Ç§„Çπ (nice)

section.center data-background="#000"
  h2.white „Ç≤„Éä<span class="red">„Éá„Ç£</span>
  span.fragment
    p.white „Éá„Ç£„Éº„Ç∏„Çß„Ç§ (DJ)

section.center data-background=image_path("dj")
  p.white.shadow.fragment I do events!

section.center
  a(href="https://twitter.com/gsamokovarov") twitter.com/gsamokovarov

section.center
  a(href="https://github.com/gsamokovarov") github.com/gsamokovarov

section.center
  a href="https://rhyme.com"
    img.inline src=image_path("rhyme.svg")

section.center data-background="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Flag_of_Bulgaria.svg/2000px-Flag_of_Bulgaria.svg.png"
  h2.white.shadow Bulgaria
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Bulgaria"

section.center data-background="https://www.mapsland.com/maps/europe/bulgaria/large-location-map-of-bulgaria.jpg"
  h2.shadow Bulgaria
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Bulgaria"

section.center data-background="https://cdn2.wanderlust.co.uk/media/2637/articles-public-mineral-baths-sofia-bulgaria-dreamstime.jpg"
  h2.white.shadow Sofia
  = copyright "Wanderlust", "https://www.wanderlust.co.uk/content/short-break-guide-to-sofia-bulgaria/"

section.center data-background="https://cdn2.wanderlust.co.uk/media/2632/magazine-1335.jpg"
  h2.white.shadow Sofia
  = copyright "Wanderlust", "https://www.wanderlust.co.uk/content/short-break-guide-to-sofia-bulgaria/"

section.center data-background="https://cdn2.wanderlust.co.uk/media/2633/magazine-2328.jpg"
  h2.white.shadow Sofia
  = copyright "Wanderlust", "https://www.wanderlust.co.uk/content/short-break-guide-to-sofia-bulgaria/"

section.center
  p –ê –ë –í –ì –î –ï –ñ –ó –ò –ô –ö –õ –ú –ù –û –ü –† –° –¢ –£ –§ –• –¶ –ß –® –© –™ –¨ –Æ –Ø
  hr
  p –∞ –± –≤ –≥ –¥ –µ –∂ –∑ –∏ –π –∫ –ª –º –Ω –æ –ø —Ä —Å —Ç —É —Ñ —Ö —Ü —á —à —â —ä —å —é —è
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Cyrillic_script"

section.center data-background="https://upload.wikimedia.org/wikipedia/commons/9/96/20101210_014809_LactobacillusBulgaricus.jpg"
  p.white.shadow Lactobacillus delbrueckii subsp. bulgaricus
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Lactobacillus_delbrueckii_subsp._bulgaricus"

section.center data-background="https://upload.wikimedia.org/wikipedia/commons/9/90/Atanasoff-Berry_Computer.jpg"
  h2.white.shadow John Atanasoff
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/John_Vincent_Atanasoff#/media/File:Atanasoff-Berry_Computer.jpg"

section.center data-background=image_path("dj")
  p.white.shadow I do events!

section.center data-background=image_path("dj")
  p.white.shadow() (literally)

section.center data-background=image_path("dj")
  p.white.shadow üòÖ

section.center data-background="#FCD846"
  a href="https://balkanruby.com"
    img.inline src=image_path("balkan.svg")

section.center data-background="#2196F3"
  a href="http://partialconf.com"
    img.inline src=image_path("partial.svg")

section.center data-background="https://upload.wikimedia.org/wikipedia/en/9/9e/Flag_of_Japan.svg"
  = copyright "Wikipedia", "https://en.wikipedia.org/wiki/Japan"

section.center data-background="https://contra.kontek.net/games/supercnes/superc1.gif" data-background-size="50%" data-background-color="#000"
  = copyright "Super C", "https://en.wikipedia.org/wiki/Super_Contra"

section.center data-background="https://contra.kontek.net/games/supercnes/superc2.gif" data-background-size="50%" data-background-color="#000"
  = copyright "Super C", "https://en.wikipedia.org/wiki/Super_Contra"

section.center data-background="https://contra.kontek.net/games/supercnes/superc3.gif" data-background-size="50%" data-background-color="#000"
  = copyright "Super C", "https://en.wikipedia.org/wiki/Super_Contra"

section.center data-background="https://contra.kontek.net/games/supercnes/superc14.gif" data-background-size="50%" data-background-color="#000"
  = copyright "Super C", "https://en.wikipedia.org/wiki/Super_Contra"

section.center data-background="https://contra.kontek.net/games/supercnes/superc15.gif" data-background-size="50%" data-background-color="#000"
  = copyright "Super C", "https://en.wikipedia.org/wiki/Super_Contra"

section.center data-background="https://contra.kontek.net/games/supercnes/superc17.gif" data-background-size="50%" data-background-color="#000"
  = copyright "Super C", "https://en.wikipedia.org/wiki/Super_Contra"

section.center data-background="#000"
  h2 üåç

section.center data-background="https://upload.wikimedia.org/wikipedia/commons/8/8c/Terminator2game.JPG"
  = copyright "Nintendo Famicom Clone", "https://en.wikipedia.org/wiki/Ending-Man_Terminator"

section.center data-background="https://vignette.wikia.nocookie.net/contra/images/4/44/Kimkoh_-_02.png"
  h2.fragment üí°
  = copyright "Kimkoh", "http://contra.wikia.com/wiki/Kimkoh"

section.center data-background="#000"
  h2.white What is Web Console<span class="red">?</span>

section.center data-background="#000"
  p.white A debugger that doesn't stop the world üåç

section.center data-background="#F0F"
  p.white An interactive puts üòé

section.center data-background="#F0F"
  = copyright "Demo", "http://localhost:3000"

section.center
  p Á¥†Êô¥„Çâ„Åó„ÅÑ„Åß„Åô ü§ó
  p <em>(Subarashƒ´desu)</em>

section.center data-background="#000"
  h2.white How does Web Console work<span class="red">?</span>

section.center data-background="#F00"
  h2.white Rack<span class="black">!</span>

section.center
  img.inline src=image_path("browser_to_rails.svg")

section.center
  img.inline src=image_path("browser_to_rails_with_web_console.svg")

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Middleware
        def call(env)
          request = create_regular_or_whiny_request(env)
          return @app.call(env) unless request.from_whitelisted_ip?

          if id = id_for_repl_session_update(request)
            return update_repl_session(id, request)
          elsif id = id_for_repl_session_stack_frame_change(request)
            return change_stack_trace(id, request)
          end

          status, headers, body = @app.call(env)

          if (session = Session.from(Thread.current)) && acceptable_content_type?(headers)
            template = Template.new(env, session)
            body, headers = Injector.new(body, headers).inject(template.render("index"))
          end

          [ status, headers, body ]
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Middleware
        def call(env)
          request = create_regular_or_whiny_request(env)
          return @app.call(env) unless request.from_whitelisted_ip? üëà

          if id = id_for_repl_session_update(request)
            return update_repl_session(id, request)
          elsif id = id_for_repl_session_stack_frame_change(request)
            return change_stack_trace(id, request)
          end

          status, headers, body = @app.call(env)

          if (session = Session.from(Thread.current)) && acceptable_content_type?(headers)
            template = Template.new(env, session)
            body, headers = Injector.new(body, headers).inject(template.render("index"))
          end

          [ status, headers, body ]
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Middleware
        def call(env)
          request = create_regular_or_whiny_request(env)
          return @app.call(env) unless request.from_whitelisted_ip?

          if id = id_for_repl_session_update(request) üëà
            return update_repl_session(id, request)
          elsif id = id_for_repl_session_stack_frame_change(request)
            return change_stack_trace(id, request)
          end

          status, headers, body = @app.call(env)

          if (session = Session.from(Thread.current)) && acceptable_content_type?(headers)
            template = Template.new(env, session)
            body, headers = Injector.new(body, headers).inject(template.render("index"))
          end

          [ status, headers, body ]
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Middleware
        def call(env)
          request = create_regular_or_whiny_request(env)
          return @app.call(env) unless request.from_whitelisted_ip?

          if id = id_for_repl_session_update(request)
            return update_repl_session(id, request)
          elsif id = id_for_repl_session_stack_frame_change(request)
            return change_stack_trace(id, request) üëà
          end

          status, headers, body = @app.call(env)

          if (session = Session.from(Thread.current)) && acceptable_content_type?(headers)
            template = Template.new(env, session)
            body, headers = Injector.new(body, headers).inject(template.render("index"))
          end

          [ status, headers, body ]
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Middleware
        def call(env)
          request = create_regular_or_whiny_request(env)
          return @app.call(env) unless request.from_whitelisted_ip?

          if id = id_for_repl_session_update(request)
            return update_repl_session(id, request)
          elsif id = id_for_repl_session_stack_frame_change(request)
            return change_stack_trace(id, request)
          end

          status, headers, body = @app.call(env) üëà

          if (session = Session.from(Thread.current)) && acceptable_content_type?(headers)
            template = Template.new(env, session)
            body, headers = Injector.new(body, headers).inject(template.render("index"))
          end

          [ status, headers, body ]
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Middleware
        def call(env)
          request = create_regular_or_whiny_request(env)
          return @app.call(env) unless request.from_whitelisted_ip?

          if id = id_for_repl_session_update(request)
            return update_repl_session(id, request)
          elsif id = id_for_repl_session_stack_frame_change(request)
            return change_stack_trace(id, request)
          end

          status, headers, body = @app.call(env)

          if (session = Session.from(Thread.current)) && acceptable_content_type?(headers) üëà
            template = Template.new(env, session)
            body, headers = Injector.new(body, headers).inject(template.render("index"))
          end

          [ status, headers, body ]
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Middleware
        def call(env)
          request = create_regular_or_whiny_request(env)
          return @app.call(env) unless request.from_whitelisted_ip?

          if id = id_for_repl_session_update(request)
            return update_repl_session(id, request)
          elsif id = id_for_repl_session_stack_frame_change(request)
            return change_stack_trace(id, request)
          end

          status, headers, body = @app.call(env)

          if (session = Session.from(Thread.current)) && acceptable_content_type?(headers)
            template = Template.new(env, session)
            body, headers = Injector.new(body, headers).inject(template.render("index"))
          end

          [ status, headers, body ] üëà
        end
      end

section.center
  img.inline src=image_path("browser_to_rails_with_web_console.svg")

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Injector
        def initialize(body, headers)
          @body = "".dup
          body.each { |part| @body << part }
          body.close if body.respond_to?(:close)
          @headers = headers
        end

        def inject(content)
          @headers.delete("Content-Length")

          [
            if position = @body.rindex("</body>")
              [ @body.insert(position, content) ]
            else
              [ @body << content ]
            end,
            @headers
          ]
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      module Kernel
        module_function

        def console(binding = Bindex.current_bindings.second)
          Thread.current[:__web_console_binding] = binding

          nil
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      # A session lets you persist an +Evaluator+ instance in memory associated
      # with multiple bindings.
      #
      # Each newly created session is persisted into memory and you can find it
      # later by its +id+.
      #
      # A session may be associated with multiple bindings. This is used by the
      # error pages only, as currently, this is the only client that needs to do
      # that.
      class WebConsole::Session
        cattr_reader :inmemory_storage, default: {}
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Session
        # Finds a persisted session in memory by its id.
        #
        # Returns a persisted session if found in memory.
        # Raises NotFound error unless found in memory.
        def self.find(id)
          inmemory_storage[id]
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Session
        # Create a Session from an binding or exception in a storage.
        #
        # The storage is expected to respond to #[]. The binding is expected in
        # :__web_console_binding and the exception in :__web_console_exception.
        #
        # Can return nil, if no binding or exception have been preserved in the
        # storage.
        def self.from(storage)
          if exc = storage[:__web_console_exception]
            new(ExceptionMapper.new(exc))
          elsif binding = storage[:__web_console_binding]
            new([binding])
          end
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Session
        # Create a Session from an binding or exception in a storage.
        #
        # The storage is expected to respond to #[]. The binding is expected in
        # :__web_console_binding and the exception in :__web_console_exception.
        #
        # Can return nil, if no binding or exception have been preserved in the
        # storage.
        def self.from(storage) üëà
          if exc = storage[:__web_console_exception]
            new(ExceptionMapper.new(exc))
          elsif binding = storage[:__web_console_binding]
            new([binding])
          end
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Session
        # Create a Session from an binding or exception in a storage.
        #
        # The storage is expected to respond to #[]. The binding is expected in
        # :__web_console_binding and the exception in :__web_console_exception.
        #
        # Can return nil, if no binding or exception have been preserved in the
        # storage.
        def self.from(storage)
          if exc = storage[:__web_console_exception] üëà
            new(ExceptionMapper.new(exc))
          elsif binding = storage[:__web_console_binding]
            new([binding])
          end
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Session
        # Create a Session from an binding or exception in a storage.
        #
        # The storage is expected to respond to #[]. The binding is expected in
        # :__web_console_binding and the exception in :__web_console_exception.
        #
        # Can return nil, if no binding or exception have been preserved in the
        # storage.
        def self.from(storage)
          if exc = storage[:__web_console_exception]
            new(ExceptionMapper.new(exc))
          elsif binding = storage[:__web_console_binding] üëà
            new([binding])
          end
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      WebConsole::Session.from(Thread.current)

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Session
        # An unique identifier for every REPL.
        attr_reader :id

        def initialize(bindings)
          @id = SecureRandom.hex(16)
          @bindings = bindings
          @evaluator = Evaluator.new(@current_binding = bindings.first)

          store_into_memory
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Session
        # An unique identifier for every REPL.
        attr_reader :id

        def initialize(bindings)
          @id = SecureRandom.hex(16)
          @bindings = bindings
          @evaluator = Evaluator.new(@current_binding = bindings.first) üòÖ

          store_into_memory
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Session
        # An unique identifier for every REPL.
        attr_reader :id

        def initialize(bindings)
          @id = SecureRandom.hex(16)
          @bindings = bindings
          @evaluator = Evaluator.new(@current_binding = bindings.first)

          store_into_memory üëà
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Session
        # Evaluate +input+ on the current Evaluator associated binding.
        #
        # Returns a string of the Evaluator output.
        def eval(input)
          @evaluator.eval(input)
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Session
        # Switches the current binding to the one at specified +index+.
        #
        # Returns nothing.
        def switch_binding_to(index)
          @evaluator = Evaluator.new(@current_binding = @bindings[index.to_i])
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Session
        # Returns context of the current binding, used by the autocompletion feature.
        def context(objpath)
          Context.new(@current_binding).extract(objpath)
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Evaluator
        def initialize(binding = TOPLEVEL_BINDING)
          @binding = binding
        end

        def eval(input)
          &quot;=&gt; \#{@binding.eval(input).inspect}\n&quot;
        rescue Exception => exc
          format_exception(exc)
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Evaluator
        def initialize(binding = TOPLEVEL_BINDING)
          @binding = binding
        end

        def eval(input)
          &quot;=&gt; \#{@binding.eval(input).inspect}\n&quot; üëà
        rescue Exception => exc
          format_exception(exc)
        end
      end

section.center data-background="#000"
  p.white You've seen a lot of Binding calls. ü§î

section.center data-background="#000"
  p.white They are really important for <span class="red">Web Console</span>...

section.center data-background="#000"
  p.white Now, back to the code slides üòÖ

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Evaluator
        def initialize(binding = TOPLEVEL_BINDING)
          @binding = binding
        end

        def eval(input)
          &quot;=&gt; \#{@binding.eval(input).inspect}\n&quot;
        rescue Exception => exc üëà
          format_exception(exc)
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Evaluator
        # Cleanses exceptions raised inside #eval.
        cattr_reader :cleaner
        @@cleaner = ActiveSupport::BacktraceCleaner.new
        @@cleaner.add_silencer { |line| line.start_with?(File.expand_path("..", __FILE__)) }

        private

          def format_exception(exc)
            backtrace = cleaner.clean(Array(exc.backtrace) - caller)

            format = "\#{exc.class.name}: \#{exc}\n".dup
            format &lt;&lt; backtrace.map { |trace| &quot;\tfrom \#{trace}\n&quot; }.join
            format
          end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Evaluator
        # Cleanses exceptions raised inside #eval.
        cattr_reader :cleaner
        @@cleaner = ActiveSupport::BacktraceCleaner.new
        @@cleaner.add_silencer { |line| line.start_with?(File.expand_path("..", __FILE__)) }

        private

          def format_exception(exc)
            backtrace = cleaner.clean(Array(exc.backtrace) - caller) üëà

            format = "\#{exc.class.name}: \#{exc}\n".dup
            format &lt;&lt; backtrace.map { |trace| &quot;\tfrom \#{trace}\n&quot; }.join
            format
          end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::ExceptionMapper
        def initialize(exception)
          @backtrace = exception.backtrace
          @bindings = exception.bindings
        end

        def first
          guess_the_first_application_binding || @bindings.first
        end

        def [](index)
          guess_binding_for_index(index) || @bindings[index]
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::ExceptionMapper
        def first
          guess_the_first_application_binding || @bindings.first
        end

        private

          def guess_the_first_application_binding
            @bindings.find do |binding|
              binding.eval("__FILE__").to_s.start_with?(Rails.root.to_s)
            end
          end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::ExceptionMapper
        def [](index)
          guess_binding_for_index(index) || @bindings[index]
        end

        private

          def guess_binding_for_index(index)
            file, line = @backtrace[index].to_s.split(":")
            line = line.to_i

            @bindings.find do |binding|
              binding.eval("__FILE__") == file && binding.eval("__LINE__") == line
            end
          end
      end

section.center data-background="#000"
  h2.white Binding

section.center data-background=image_path("aaron_binding.png")
  .fragment
    blockquote"Basically, an implementor's nightmare!"
    p Aaron Patterson

section.center data-background="#000"
  p.white Encapsulate the execution context at some particular place in the code.

section.center data-background="#000"
  p.white Retain this context for future use.

section.center
  p Local variables

section.center
  p Instance variables

section.center
  p Methods

section.center
  p self

section.center
  p The current class

section.center
  p __FILE__

section.center
  p __LINE__

section.center data-background="#000"
  p.white Binding#<span class="red">eval</span> <span class="fragment">üëà</span>

section.center data-background="#000"
  p.white Usually created using Kernel#binding.

section.center data-background="#000"
  p.white Created <strong>only</strong> for the current thread stack frame!

section.center data-background="#000"
  p.white Keeps a reference to <span class="red">everything</span> the current context can touch.

section.center
  h2 ü§î

section.center
  h2 Binding#pry
  p binding.pry

section.center
  h2 Binding#irb
  p binding.irb

section.center data-background="#000"
  h2.white Binding#console
  p.white binding.console

section.center data-background="#000"
  h2 üòÖ

section.center
  h2 Kernel#console
  p console

section.center
  pre(contenteditable=true): code.ruby
    '
      module Kernel
        module_function

        def console(binding = Bindex.current_bindings.second)
          Thread.current[:__web_console_binding] = binding

          nil
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      module Kernel
        module_function

        def console(binding = Bindex.current_bindings.second) üëà
          Thread.current[:__web_console_binding] = binding

          nil
        end
      end

section.center data-background="#000"
  h2.white Kernel#caller

section.center
  pre(contenteditable=true): code.shell
    '
      &gt;&gt; puts caller
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/workspace.rb:85:in `eval'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/workspace.rb:85:in `evaluate'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/context.rb:380:in `evaluate'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:491:in `block (2 levels) in eval_input'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:621:in `signal_status'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:488:in `block in eval_input'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/ruby-lex.rb:246:in `block (2 levels) in each_top_level_statement'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/ruby-lex.rb:232:in `loop'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/ruby-lex.rb:232:in `block in each_top_level_statement'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/ruby-lex.rb:231:in `catch'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/ruby-lex.rb:231:in `each_top_level_statement'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:487:in `eval_input'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:428:in `block in run'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:427:in `catch'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:427:in `run'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:383:in `start'
      /Users/genadi/.rbenv/versions/2.5.0/bin/irb:11:in `&lt;main&gt;'
      =&gt; nil

section.center
  p Reflection of the current thread stack frames as readable text.

section.center
  p Represented as an Array of String objects.

section.center data-background="#000"
  h2.white Kernel#caller_locations

section.center
  p The same as Kernel#caller, but returns an Array of Thread::Backtrace::Location objects.

section.center
  pre(contenteditable=true): code.shell
    '
      &gt;&gt; puts caller_locations
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/workspace.rb:85:in `eval'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/workspace.rb:85:in `evaluate'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/context.rb:380:in `evaluate'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:491:in `block (2 levels) in eval_input'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:621:in `signal_status'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:488:in `block in eval_input'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/ruby-lex.rb:246:in `block (2 levels) in each_top_level_statement'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/ruby-lex.rb:232:in `loop'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/ruby-lex.rb:232:in `block in each_top_level_statement'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/ruby-lex.rb:231:in `catch'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/ruby-lex.rb:231:in `each_top_level_statement'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:487:in `eval_input'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:428:in `block in run'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:427:in `catch'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:427:in `run'
      /Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb.rb:383:in `start'
      /Users/genadi/.rbenv/versions/2.5.0/bin/irb:11:in `&lt;main&gt;'
      =&gt; nil

section.center
  pre(contenteditable=true): code.shell
    '
      &gt;&gt; caller_locations.first.path
      =&gt; &quot;/Users/genadi/.rbenv/versions/2.5.0/lib/ruby/2.5.0/irb/workspace.rb&quot;
      &gt;&gt; caller_locations.first.label
      =&gt; &quot;eval&quot;
      &gt;&gt; caller_locations.first.lineno
      =&gt; 85

section.center data-background="#F00"
  h2.white Bindex

section.center data-background="#000"
  h2.white Bindex

section.center data-background="#00F"
  h2.white Bindex

section.center
  p Cross-platform utilities for building <span class="red">Bindings</span>.

section.center
  p CRuby

section.center
  p JRuby

section.center
  p Rubinius

section.center data-background="#000"
  h2.white ‚úåÔ∏è

section.center data-background="#000"
  h2.white ‚òùÔ∏è

section.center data-background="#000"
  h2.white Bindex.current_bindings

section.center
  pre(contenteditable=true): code.c
    '
      static VALUE
      current_bindings_callback(const rb_debug_inspector_t *context, void *data)
      {
        VALUE locations = rb_debug_inspector_backtrace_locations(context);
        VALUE binding, bindings = rb_ary_new();
        long i, length = RARRAY_LEN(locations);

        for (i = 0; i < length; i++) {
          binding = rb_debug_inspector_frame_binding_get(context, i);

          if (!NIL_P(binding)) {
            rb_ary_push(bindings, binding);
          }
        }

        return bindings;
      }

section.center
  pre(contenteditable=true): code.c
    '
      static VALUE
      current_bindings(void)
      {
        return rb_debug_inspector_open(current_bindings_callback, NULL);
      }

section.center
  pre(contenteditable=true): code.c
    '
      static VALUE
      bx_current_bindings(VALUE self)
      {
        return current_bindings();
      }

section.center
  pre(contenteditable=true): code.c
    '
      void
      Init_cruby(void)
      {
        bx_mBindex = rb_define_module("Bindex");

        rb_define_singleton_method(bx_mBindex, "current_bindings", bx_current_bindings, 0);
      }

section.center data-background="#000"
  h2.white Debug Inspector API

section.center
  pre(contenteditable=true): code.c
    '
      /* debug inspector APIs */
      typedef struct rb_debug_inspector_struct rb_debug_inspector_t;
      typedef VALUE (*rb_debug_inspector_func_t)(const rb_debug_inspector_t *, void *);

      VALUE rb_debug_inspector_open(rb_debug_inspector_func_t func, void *data);
      VALUE rb_debug_inspector_frame_self_get(const rb_debug_inspector_t *dc, long index);
      VALUE rb_debug_inspector_frame_class_get(const rb_debug_inspector_t *dc, long index);
      VALUE rb_debug_inspector_frame_binding_get(const rb_debug_inspector_t *dc, long index);
      VALUE rb_debug_inspector_frame_iseq_get(const rb_debug_inspector_t *dc, long index);
      VALUE rb_debug_inspector_backtrace_locations(const rb_debug_inspector_t *dc);

section.center
  p Straight outta ruby/ruby.h üòÖ

section.center
  h2.Kernel#console

section.center
  p Consider this a future slide...

section.center data-background="#000"
  h2.white How does the error page works <span class="red">?</span>

section.center data-background="#222"
  p.white To learn about how error handling works in Rails...

section.center data-background="#444"
  p.white We need to learn how error handling works in <span class="red">Ruby</span>...

section.center
  p WIP

section.center data-background="#000"
  h2.white Error Handling in <span class="red">Rails</span>

section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware
      use Rack::Sendfile
      use ActionDispatch::Static
      use ActionDispatch::Executor
      use ActiveSupport::Cache::Strategy::LocalCache::Middleware
      use Rack::Runtime
      use Rack::MethodOverride
      use ActionDispatch::RequestId
      use ActionDispatch::RemoteIp
      use Sprockets::Rails::QuietAssets
      use Rails::Rack::Logger
      use ActionDispatch::ShowExceptions
      use WebConsole::Middleware
      use ActionDispatch::DebugExceptions
      use ActionDispatch::Reloader
      use ActionDispatch::Callbacks
      use ActiveRecord::Migration::CheckPending
      use ActionDispatch::Cookies
      use ActionDispatch::Session::CookieStore
      use ActionDispatch::Flash
      use ActionDispatch::ContentSecurityPolicy::Middleware
      use Rack::Head
      use Rack::ConditionalGet
      use Rack::ETag
      use Rack::TempfileReaper
      run Banitsa::Application.routes

section.center
  img.inline src=image_path("browser_to_rails_with_web_console.svg")

section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware
      use Rack::Sendfile
      use ActionDispatch::Static
      use ActionDispatch::Executor
      use ActiveSupport::Cache::Strategy::LocalCache::Middleware
      use Rack::Runtime
      use Rack::MethodOverride
      use ActionDispatch::RequestId
      use ActionDispatch::RemoteIp
      use Sprockets::Rails::QuietAssets
      use Rails::Rack::Logger
      use ActionDispatch::ShowExceptions
      use WebConsole::Middleware
      use ActionDispatch::DebugExceptions
      use ActionDispatch::Reloader
      use ActionDispatch::Callbacks
      use ActiveRecord::Migration::CheckPending
      use ActionDispatch::Cookies
      use ActionDispatch::Session::CookieStore
      use ActionDispatch::Flash
      use ActionDispatch::ContentSecurityPolicy::Middleware
      use Rack::Head
      use Rack::ConditionalGet
      use Rack::ETag
      use Rack::TempfileReaper
      run Banitsa::Application.routes

section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware
      # ...
      use ActionDispatch::ShowExceptions
      use WebConsole::Middleware
      use ActionDispatch::DebugExceptions
      # ...

section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware
      # ...
      use ActionDispatch::ShowExceptions
      use WebConsole::Middleware
      use ActionDispatch::DebugExceptions üëà
      # ...

section.center data-background="#F00"
  h2.white ActionDispatch::DebugExceptions

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::DebugExceptions
        def call(env)
          request = ActionDispatch::Request.new env
          _, headers, body = response = @app.call(env)

          response
        rescue Exception => exception
          invoke_interceptors(request, exception)
          raise exception unless request.show_exceptions?
          render_exception(request, exception)
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::DebugExceptions
        def call(env)
          request = ActionDispatch::Request.new env
          _, headers, body = response = @app.call(env) üëà

          response
        rescue Exception => exception
          invoke_interceptors(request, exception)
          raise exception unless request.show_exceptions?
          render_exception(request, exception)
        end
      end

section.center
  img.inline src=image_path("browser_to_rails.svg")

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::DebugExceptions
        def call(env)
          request = ActionDispatch::Request.new env
          _, headers, body = response = @app.call(env)

          response
        rescue Exception => exception üëà
          invoke_interceptors(request, exception)
          raise exception unless request.show_exceptions?
          render_exception(request, exception)
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::DebugExceptions
        def call(env)
          request = ActionDispatch::Request.new env
          _, headers, body = response = @app.call(env)

          response
        rescue Exception => exception
          invoke_interceptors(request, exception)
          raise exception unless request.show_exceptions?
          render_exception(request, exception) üëà
        end
      end

section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware
      # ...
      use ActionDispatch::ShowExceptions
      use WebConsole::Middleware
      use ActionDispatch::DebugExceptions
      # ...

section.center
  pre(contenteditable=true): code.shell
    '
      $ rails middleware
      # ...
      use ActionDispatch::ShowExceptions üëà
      use WebConsole::Middleware
      use ActionDispatch::DebugExceptions
      # ...

section.center data-background="#F00"
  h2.white ActionDispatch::ShowExceptions

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::ShowExceptions
        FAILSAFE_RESPONSE = [500, { "Content-Type" => "text/plain" },
          ["500 Internal Server Error\n" ...]

        def initialize(app, exceptions_app)
          @app = app
          @exceptions_app = exceptions_app
        end

        def call(env)
          request = ActionDispatch::Request.new env
          @app.call(env)
        rescue Exception => exception
          if request.show_exceptions?
            render_exception(request, exception)
          else
            raise exception
          end
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::ShowExceptions
        FAILSAFE_RESPONSE = [500, { "Content-Type" => "text/plain" },
          ["500 Internal Server Error\n"]]

        def initialize(app, exceptions_app)
          @app = app
          @exceptions_app = exceptions_app
        end

        def call(env)
          request = ActionDispatch::Request.new env
          @app.call(env)
        rescue Exception => exception
          if request.show_exceptions?
            render_exception(request, exception) üëà
          else
            raise exception
          end
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::ShowExceptions
        FAILSAFE_RESPONSE = [500, { "Content-Type" => "text/plain" }, üëà
          ["500 Internal Server Error\n"]]

        def initialize(app, exceptions_app)
          @app = app
          @exceptions_app = exceptions_app
        end

        def call(env)
          request = ActionDispatch::Request.new env
          @app.call(env)
        rescue Exception => exception
          if request.show_exceptions?
            render_exception(request, exception)
          else
            raise exception
          end
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class ActionDispatch::DebugExceptions
        def render_exception_with_web_console(request, exception)
          render_exception_without_web_console(request, exception).tap do
            backtrace_cleaner = request.get_header("action_dispatch.backtrace_cleaner")
            error = ActionDispatch::ExceptionWrapper.new(backtrace_cleaner, exception).exception

            # Get the original exception if ExceptionWrapper decides to follow it.
            Thread.current[:__web_console_exception] = error

            # ActionView::Template::Error bypass ExceptionWrapper original
            # exception following. The backtrace in the view is generated from
            # reaching out to cause in the view.
            if error.is_a?(ActionView::Template::Error)
              Thread.current[:__web_console_exception] = error.cause
            end
          end
        end

        alias_method :render_exception_without_web_console, :render_exception
        alias_method :render_exception, :render_exception_with_web_console
      end

section.center data-background="#F00"
  h2.white üôà üôâ üôä

section.center data-background="#F00"
  h2.white Rails 6

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Railtie < ::Rails::Railtie
        initializer 'web_console.initialize' do
          ActionDispatch::DebugExceptions
            .register_interceptor(WebConsole::Interceptor.new)
        end
      end

section.center
  pre(contenteditable=true): code.ruby
    '
      class WebConsole::Interceptor
        def call(request, exception)
          backtrace_cleaner = request.get_header('action_dispatch.backtrace_cleaner')
          error = ExceptionWrapper.new(backtrace_cleaner, exception).exception

          # Get the original exception if ExceptionWrapper decides to follow it.
          Thread.current[:__web_console_exception] = error

          # ActionView::Template::Error bypass ExceptionWrapper original
          # exception following. The backtrace in the view is generated from
          # reaching out to original_exception in the view.
          if error.is_a?(ActionView::Template::Error)
            Thread.current[:__web_console_exception] = error.cause
          end
        end
      end

section.center data-background="#F00"
  p.white The Interceptor API

section.center data-background="#F00"
  h2.white üôÖ‚Äç‚ôÄÔ∏è üêí 

section.center data-background="#F0F"
  h2.white Limitations<span class="black">!</span>

section.center
  p Multi-process servers.

section.center
  p Remote Code Execution (<span class="red">RCE</span>)

section.center data-background="#000"
  h2.white üòÖ
